/** 
 * 
 */
package agents

import org.arakhne.afc.gis.road.primitive.RoadNetwork
import org.arakhne.afc.math.geometry.d2.d.Point2d
import road_elements.Car
import road_elements.GPS
import road_elements.Road
import events.Perception
import events.Influence
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import events.ArrivedAtEndRoad
import io.sarl.core.Initialize
import java.util.ArrayList
import events.ArrivedAtDestination
import io.sarl.core.Lifecycle
import events.MoveForward
import org.arakhne.afc.gis.road.primitive.RoadConnection
import capacities.Drive
import capacities.DrivingNormal
import io.sarl.core.Destroy
import org.arakhne.afc.math.geometry.d2.Point2D

/** 
 * @author robin
 * 
 */
agent Driver {
	uses Logging
	uses DefaultContextInteractions
	uses Lifecycle
	uses Drive

	protected var currentPoint : Point2d
	protected var arrivalPoint : Point2d
	protected var car : Car
	protected var gps : GPS

	protected var begSegment : Point2D
	protected var endSegment : Point2D
	var env : EnvAgent

	on Initialize {
		synchronized (this) {
			setSkill(new DrivingNormal)
			this.env = occurrence.parameters.get(2) as EnvAgent
			var network = occurrence.parameters.get(1) as RoadNetwork

			this.car = occurrence.parameters.get(0) as Car

			// this.car.setCoordinates(this.begSegment, this.endSegment)
			this.currentPoint = this.car.coordinates
			this.arrivalPoint = new Point2d(50, 50)
			this.gps = new GPS(this.currentPoint, this.arrivalPoint, network)
			this.car.road = this.gps.nextRoad
			this.begSegment = this.gps.nextPoint
			this.endSegment = this.gps.nextPoint

			if (!this.gps.hasNextRoad) {
				this.killThis
				return
			}

			emit(new Influence(this.ID, this.arrivalPoint, this.endSegment))

		}

	}

	on Destroy {
		info("The agent was stopped.")
	}

	/* synchronized def initProperties(car : Car, arrivalPoint : Point2d, network : RoadNetwork) : void {
	 * 
	 * this.car.road = this.gps.nextRoad
	 * this.begSegment=this.gps.nextPoint
	 * this.endSegment = this.gps.nextPoint
	 * this.car.setCoordinates(this.begSegment, this.endSegment)
	 * this.currentPoint = this.car.coordinates
	 * 
	 * }
	 */
	on ArrivedAtEndRoad {
		info("ARRIVED END OF ROAD")
		synchronized (this) {
			var nextRoadToTake = this.gps.nextRoad
			this.begSegment = this.endSegment
			this.endSegment = this.gps.nextPoint
			// info("NEXTROADTOTOKE " + nextRoadToTake.beginX + " " + nextRoadToTake.beginY + " - " + nextRoadToTake.endX + " " +nextRoadToTake.endY)
			// info("BEGSEG " + this.begSegment)
			// info("ENDSEG " + this.endSegment)
			if (this.endSegment === null)
				this.killThis
				
			this.car.setCoordinates(this.car.position.segment.firstPoint, this.car.position.segment.lastPoint)
			this.car.road.removeObject(this.car)
			this.car.road = nextRoadToTake
			this.car.road.addObject(this.car)
			this.car.position.x = 0
			
			emit(new Influence(this.ID, this.arrivalPoint, this.endSegment))
		}

	}

	on ArrivedAtDestination {
		info("ARRIVED AT DESTINATION")
		this.killThis
	}

	def killThis : void {
		this.env.removeAgentAndCar(this.ID)
		this.car.road.removeObject(this.car)
		this.car.removeFromLayer
		killMe
	}

	on MoveForward {
		synchronized (this) {
			this.car.position.x = this.car.position.x + speed
			this.car.setCoordinates(this.begSegment, this.endSegment)
			this.currentPoint = this.car.coordinates
			println(this.currentPoint.x+" "+this.currentPoint.y)
			// Thread.sleep(250)
			emit(new Influence(this.ID, this.arrivalPoint, this.endSegment))
		}

	}

	def getCurrentPoint : Point2d {
		return this.currentPoint
	}

	def getArrivalPoint : Point2d {
		return this.arrivalPoint
	}

	on Initialize {
		// emit(new AgentDeparture)
	}	
}