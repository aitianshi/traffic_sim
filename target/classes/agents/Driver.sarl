/** 
 * 
 */
package agents

import org.arakhne.afc.gis.road.primitive.RoadNetwork
import org.arakhne.afc.math.geometry.d2.d.Point2d
import road_elements.Car
import road_elements.GPS
import road_elements.Road
import events.Perception
import events.Influence
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import events.ArrivedAtEndRoad
import io.sarl.core.Initialize
import java.util.ArrayList
import events.ArrivedAtDestination
import io.sarl.core.Lifecycle
import events.MoveForward
import org.arakhne.afc.gis.road.primitive.RoadConnection

/** 
 * @author robin
 * 
 */
agent Driver {
	uses Logging
	uses DefaultContextInteractions
	uses Lifecycle
	
	protected var currentPoint : Point2d
	protected var arrivalPoint : Point2d
	protected var car : Car
	protected var speed : int
	protected var gps : GPS
	protected var normalDirection = true

	synchronized def initProperties(car : Car, arrivalPoint : Point2d, network : RoadNetwork) : void {
		this.car=car
		this.currentPoint = this.car.coordinates
		this.arrivalPoint = arrivalPoint
		this.speed = 0
		this.gps=new GPS(this.currentPoint,this.arrivalPoint,network)
		
	}

	on ArrivedAtEndRoad {
		info("ARRIVED END OF ROAD")
		synchronized (this) {
			var nextRoadToTake = this.gps.nextRoad
			if(nextRoadToTake===null)
				this.killThis
				
			this.car.road = nextRoadToTake
			info(nextRoadToTake.beginX + " " + nextRoadToTake.beginY + "; " + nextRoadToTake.endX + " " + nextRoadToTake.endY)
			info(this.car.coordinates)
			if(this.currentPoint.equals(nextRoadToTake.begin)){
				this.car.pos1D = 0
				this.normalDirection=true
			}
			else if(this.currentPoint.equals(nextRoadToTake.end)){
				this.car.pos1D = this.car.road.distanceKilometers
				this.normalDirection=false
			}
			emit(new Influence(this.ID, this.arrivalPoint))
		}
		
	}
	
	on ArrivedAtDestination {
		this.killThis
	}
	
	def killThis : void {
		this.car.removeFromLayer
		killMe
	}

	on MoveForward {
		synchronized(this){
			if(this.normalDirection){
				this.car.pos1D = this.car.pos1D + 1 // ATTENTION les voitures ne bougent pas : il faut zoomer/d√©zoomer pouvoir l'avancement
			}
			else {
				this.car.pos1D = this.car.pos1D - 1
			}
			this.currentPoint=this.car.coordinates
			Thread.sleep(250)
			emit(new Influence(this.ID, this.arrivalPoint))
		}

	}
	
	def getCurrentPoint:Point2d{
		return this.currentPoint
	}

	def getArrivalPoint : Point2d { 
		return this.arrivalPoint
	}

	on Initialize {
		// emit(new AgentDeparture)
	}	
}
