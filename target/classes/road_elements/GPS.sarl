package road_elements;

import org.arakhne.afc.gis.road.path.astar.RoadAStar;
import org.arakhne.afc.gis.road.primitive.RoadNetwork;
import org.arakhne.afc.math.geometry.d2.d.Point2d;
import org.arakhne.afc.gis.road.path.RoadPath;
import java.util.ArrayList
import org.arakhne.afc.math.geometry.d2.Point2D

class GPS {
	var listRoads : ArrayList<Road> = new ArrayList<Road> 
	var listPoints : ArrayList<Point2D> = new ArrayList<Point2D>
	
	new(current : Point2D, end : Point2D, network : RoadNetwork)  {
		var aStar:RoadAStar = new RoadAStar();
		var path : RoadPath = aStar.solve(current, end, network);

		var count : int = 0

		
		for (roadSegment : path) {
			var r = roadSegment as Road
			this.listRoads.add(r)
		}
		
		this.transform(current)
		
		// println("GPS    :  "+this.listPoints)
}

	private def transform(current : Point2D) : void {
		this.listPoints.add(current)
		var lastPointAdded = current 
		
		for(road:this.listRoads){
			if (road.begin.equals(lastPointAdded)) {
				this.listPoints.add(road.end)
				lastPointAdded = road.end
			}
			else if (road.end.equals(lastPointAdded)) {
				this.listPoints.add(road.begin)
				lastPointAdded = road.begin
			}
		}
	}
	
	def getNextRoad : Road {
		if(this.hasNextRoad){
			var r = this.listRoads.get(0)
			this.listRoads.remove(0)
			return r
		}
		return null
	}
	
	def getNextPoint : Point2D {
		if(this.listPoints.size == 0)
			return null
			
		var p = this.listPoints.get(0)
		this.listPoints.remove(p)
		return p
	}
	
	def hasNextRoad : boolean{
		return this.listRoads.size != 0
	}

	@Override
	def toString() : String {
		return this.listRoads.toString
	}
}
