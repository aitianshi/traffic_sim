package drawers;

import org.arakhne.afc.nodefx.Drawer
import org.arakhne.afc.nodefx.ZoomableGraphicsContext
import road_elements.Car
import road_elements.Road
import org.arakhne.afc.math.geometry.d2.d.OrientedRectangle2d
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

class CarDrawer implements Drawer<Car> {
	static val width : int = 2

	@Override
	def draw(gc : ZoomableGraphicsContext, element : Car) : void {
		val position2d = new Point2d
		val tangent2d = new Vector2d

		var c = gc.rgb(100)

		gc.fill = c
		gc.stroke = c
		gc.save

		var position = element.position

		/*println("POS 2D : " + position2d)
		println("TANG 2D : " + tangent2d)
		println("POS CURV : " + position.curvilineCoordinate)
		println("POS LAT : " + position.lateralDistance)*/

		element.position.segment.projectsOnPlane(position.curvilineCoordinate, position.lateralDistance, position2d, tangent2d)

		// var bounds = element.bounds
		// var width = bounds.width
		// var height = bounds.height
		var width = 2
		var r = new OrientedRectangle2d(position2d.x, position2d.y, 1, 0, width / 2.0, width / 2.0)
		r.rotate(tangent2d.orientationAngle)

		var iterator = r.pathIterator
		gc.beginPath
		while (iterator.hasNext) {
			var cmp = iterator.next
			switch (cmp.type) {
				case MOVE_TO: {
					gc.moveTo(cmp.toX, cmp.toY)
				}
				case LINE_TO: {
					gc.lineTo(cmp.toX, cmp.toY)
				}
				case CLOSE: {
					gc.closePath
				}
				default:
					throw new IllegalStateException
			}
		}
		gc.fill()
		gc.restore

	/* 
	 * gc.save
	 * var position = element.position.x
	 * var r = new Rectangle2d(element.position.)

	 * var coord= element.coordinates
	 * 
	 * 

	 * 
	 * gc.fill = element.color
	 * gc.stroke = element.color
	 * gc.fillRect(coord.x - CarDrawer::width / 2, coord.y - CarDrawer::width / 2, CarDrawer::width, CarDrawer::width);
	 * gc.strokeRect(coord.x - CarDrawer::width / 2, coord.y - CarDrawer::width / 2, CarDrawer::width,
	 * CarDrawer::width);
	 * gc.restore
	 * 
	 */
	}

	@Override
	def getPrimitiveType() : Class<? extends Car> {
		return Car as Class<? extends Car>
	}

}
