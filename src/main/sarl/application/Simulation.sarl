/** 
 * 
 */
package application

/** 
 * @author tiantian
 * 
 */
import agents.EnvAgent
import io.sarl.bootstrap.SRE
import java.io.File
import java.util.ArrayList
import javafx.application.Application
import javafx.scene.Scene
import javafx.scene.image.Image
import javafx.scene.layout.BorderPane
import javafx.stage.Stage
import org.arakhne.afc.gis.io.shape.GISShapeFileReader
import org.arakhne.afc.gis.mapelement.MapElement
import org.arakhne.afc.gis.maplayer.MapElementLayer
import org.arakhne.afc.gis.maplayer.MultiMapLayer
import org.arakhne.afc.gis.maplayer.TreeMapElementLayer
import org.arakhne.afc.gis.road.RoadPolyline
import org.arakhne.afc.gis.road.StandardRoadNetwork
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import org.arakhne.afc.gis.road.primitive.RoadNetworkException
import org.arakhne.afc.gis.ui.GisCanvas
import org.arakhne.afc.io.shape.ShapeElementType
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.nodefx.ZoomablePane
import org.arakhne.afc.vmutil.Resources
import road_elements.Road
import road_elements.RoadObject
import road_elements.TrafficLayers
import road_elements.TrafficLight

class Simulation extends Application {

	var trafficLayers = new TrafficLayers(new ArrayList<Road>(), new ArrayList<RoadObject>())

	def getTrafficLayers : TrafficLayers {
		return this.trafficLayers;
	}

	def getRoads : TrafficLayers {
		var roads = TrafficLayers::roadListFactory
		var cars = new ArrayList<RoadObject>() // TrafficLayers::carListFactory(roads)
		return new TrafficLayers(roads, cars)
	}

	@Override
	def start(primaryStage : Stage) throws Exception {
		var root = new BorderPane()
		var reader : road_elements.ShapeReader = new road_elements.ShapeReader()

		var file : File = new File("src/main/resources/application/quartier_polyline.shp")
		// var file : File = new File("src/main/resources/application/roads-line.shp")
		
        // var loadedResourceOK = shapeToLayers()
		// var loadedRoads : RoadNetworkLayer = loadShapeFile2(file) as RoadNetworkLayer
		
		this.trafficLayers = getRoads()
		// var tl = new TrafficLight(0,this.trafficLayers.roadNetworkLayer.roadNetwork.roadSegments.get(0) as Road)
		// this.trafficLayers.addTrafficLight(tl)
		var rootLayer = new MultiMapLayer
		rootLayer.addMapLayer(this.trafficLayers)
		var canvas = new GisCanvas(rootLayer)
		var scrollPane = new ZoomablePane(canvas);

		root.setCenter(scrollPane)

		var scene = new Scene(root, 1024, 768)
		scene.getStylesheets().add("application.css")
		
		var applicationIcon32 = new Image(Resources::getResourceAsStream(typeof(Simulation), "/traffic_light_32.png"))
		primaryStage.getIcons().add(applicationIcon32)
		primaryStage.setTitle("Traffic Simulation")
		primaryStage.setScene(scene)
		primaryStage.show()

		var bootstrap = SRE.getBootstrap()
		bootstrap.startAgent(EnvAgent, this.trafficLayers, canvas)
	}

	def loadShapeFile2(file : File) : MapElementLayer<?> {

		var network : StandardRoadNetwork = null
		var layer : MapElementLayer<MapElement> = null

		var reader : GISShapeFileReader = new GISShapeFileReader(file)

		var worldRect : Rectangle2d = new Rectangle2d()

		var esriBounds = reader.getBoundsFromHeader()

		worldRect.setFromCorners(
			esriBounds.getMinX(),
			esriBounds.getMinY(),
			esriBounds.getMaxX(),
			esriBounds.getMaxY()
		)

		if (reader.getShapeElementType() == ShapeElementType.POLYLINE) {
			reader.setMapElementType(typeof(RoadPolyline))
		}

		var element : MapElement

		while ((element = reader.read()) !== null) {
			if (element instanceof RoadPolyline) {
				if (network === null) {
					network = new StandardRoadNetwork(worldRect)
				}
				var sgmt : RoadPolyline = element
				try {
					network.addRoadSegment(sgmt)
				} catch (e : RoadNetworkException) {
					throw new RuntimeException(e)
				}
			} else {
				if (layer === null) {
					layer = new TreeMapElementLayer
					try {
						layer.addMapElement(element)
					} catch (e : RoadNetworkException) {
						throw new RuntimeException(e)
					}
				}
			}
		}

		if (network !== null) {
			var networkLayer = new RoadNetworkLayer(network)
			return networkLayer
		}

		return layer
	}

	def static shapeToLayers() : MultiMapLayer {
		var list = new ArrayList<Road>()

		var file : File = new File("src/main/resources/application/quartier_polyline.shp")
		var reader : GISShapeFileReader = new GISShapeFileReader(file)

		var worldRect : Rectangle2d = new Rectangle2d()
		var esriBounds = reader.getBoundsFromHeader()
		worldRect.setFromCorners(
			esriBounds.getMinX(),
			esriBounds.getMinY(),
			esriBounds.getMaxX(),
			esriBounds.getMaxY()
		)
		var multiMapLayer = new MultiMapLayer
		var roadNetworkLayer : RoadNetworkLayer = null
		var mapElementLayer = new TreeMapElementLayer<MapElement>(worldRect)

		var network = new StandardRoadNetwork(worldRect)

		if (reader.getShapeElementType() == ShapeElementType.POLYLINE) {
			reader.setMapElementType(typeof(RoadPolyline))
		}

		var element : MapElement
		var count = 0
		while ((element = reader.read()) !== null) {

			if (element instanceof RoadPolyline) {
				var sgmt = element

				if (network === null) {
					network = new StandardRoadNetwork(worldRect);
				}

				for (group : sgmt.groups) {
					for (var i = 0; i < group.points.size - 1; i++) {
						var xBegin = group.points.get(i).x as int
						var yBegin = group.points.get(i).y as int
						var xEnd = group.points.get(i + 1).x as int
						var yEnd = group.points.get(i + 1).y as int

						var road = new Road(xBegin, yBegin, xEnd, yEnd)
						network.addRoadSegment(road)

					/* 
					 * var car : Car = new Car(0, road, 0, 0)
					 * //print(car)
					 * mapElementLayer.addMapElement(car)
					 * //print(mapElementLayer)
					 */
					}
				}

			}
			count++
		}

		roadNetworkLayer = new RoadNetworkLayer(network)
		multiMapLayer.addMapLayer(roadNetworkLayer)
		multiMapLayer.addMapLayer(mapElementLayer)

		return multiMapLayer
	}
}
