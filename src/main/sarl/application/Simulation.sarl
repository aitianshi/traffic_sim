/** 
 * 
 */
package application

/** 
 * @author tiantian
 * 
 */

import java.io.File
import java.io.FileInputStream
import java.io.InputStream
import java.net.URL
import java.util.ArrayList
import javafx.application.Application
import javafx.scene.Scene
import javafx.scene.control.Label
import javafx.scene.image.Image
import javafx.scene.layout.BorderPane
import javafx.scene.text.TextAlignment
import javafx.stage.Stage
import org.arakhne.afc.gis.io.shape.GISShapeFileReader
import org.arakhne.afc.gis.mapelement.MapElement
import org.arakhne.afc.gis.maplayer.MapElementLayer
import org.arakhne.afc.gis.maplayer.MultiMapLayer
import org.arakhne.afc.gis.maplayer.TreeMapElementLayer
import org.arakhne.afc.gis.road.RoadPolyline
import org.arakhne.afc.gis.road.StandardRoadNetwork
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import org.arakhne.afc.gis.road.primitive.RoadNetworkException
import org.arakhne.afc.gis.ui.GisCanvas
import org.arakhne.afc.io.dbase.DBaseFileFilter
import org.arakhne.afc.io.shape.ShapeElementType
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.nodefx.ZoomablePane
import org.arakhne.afc.vmutil.FileSystem
import org.arakhne.afc.vmutil.Resources
import road_elements.GPS
import road_elements.Road

class Simulation extends Application {

	def getRoads : RoadNetworkLayer {
		var roadList : ArrayList<Road> = new ArrayList<Road>()
		// autoroutes
		roadList.add(new Road(0, 0, 0, 20, 100))
		roadList.add(new Road(0, 20, 0, 100, 100))
		roadList.add(new Road(0, 100, 100, 100, 100))
		roadList.add(new Road(100, 100, 100, 50, 100))
		roadList.add(new Road(100, 50, 100, 0, 100))
		roadList.add(new Road(100, 0, 0, 0, 100))

		// bretelles
		roadList.add(new Road(0, 20, 20, 20, 70))
		roadList.add(new Road(50, 50, 100, 50, 70))

		//ville
		roadList.add(new Road(20, 20, 50, 20, 50))
		roadList.add(new Road(20, 50, 50, 50, 50))
		roadList.add(new Road(20, 30, 50, 30, 50))
		roadList.add(new Road(20, 20, 20, 30, 50))
		roadList.add(new Road(20, 30, 20, 50, 50))
		roadList.add(new Road(50, 20, 50, 30, 50))
		roadList.add(new Road(50, 30, 50, 50, 50))

		var worldRect = new Rectangle2d()
		worldRect.setFromCorners(-200, -200, 200, 200)
		var network = new StandardRoadNetwork(worldRect)
		for (road : roadList) {
			network.addRoadSegment(road)
		}

		var p1 : Point2d = new Point2d(0, 0)
		var p2 : Point2d = new Point2d(100, 100)

		println(GPS.nextRoad(p1, p2, network))

		return new RoadNetworkLayer(network)
	}

	@Override
	def start(primaryStage : Stage) throws Exception {
		// var filename : StringBuilder		
		// var simpleName = typeof(Test).simpleName
        // var loadedResource = getRoads()
        
		var file : File = new File("/home/tiantian/Documents/IA51/Etienne/traffic_sim/src/main/resources/application/quartier_polyline.shp")
        var loadedResource = loadShapeFile(file)

		var root = new BorderPane()

		var messageBar = new Label("")
		messageBar.setTextAlignment(TextAlignment.CENTER)

		var rootLayer = new MultiMapLayer
		rootLayer.addMapLayer(loadedResource)

		var scrollPane = new ZoomablePane(new GisCanvas(rootLayer));

		root.setCenter(scrollPane)

		root.setBottom(messageBar)

		var scene = new Scene(root, 1024, 768)
		scene.getStylesheets().add("application.css")
		// scene.stylesheets.add(class.getResource("application.css").toExternalForm)
		
		var applicationIcon32 = new Image(Resources::getResourceAsStream(typeof(Simulation), "/traffic_light_32.png"))
		primaryStage.getIcons().add(applicationIcon32)
		primaryStage.setTitle("Traffic Simulation")
		primaryStage.setScene(scene)
		primaryStage.show()
	}

	def loadShapeFile(file : File) : MapElementLayer<?> {
		var network : StandardRoadNetwork = null
		var layer : MapElementLayer<MapElement> = null

		var reader : GISShapeFileReader = new GISShapeFileReader(file)
		
		var worldRect : Rectangle2d = new Rectangle2d()
		
		var	esriBounds = reader.getBoundsFromHeader()
		
		worldRect.setFromCorners(esriBounds.getMinX(), 
								esriBounds.getMinY(), 
								esriBounds.getMaxX(),
								esriBounds.getMaxY()
		)

		if (reader.getShapeElementType() == ShapeElementType.POLYLINE) {
			reader.setMapElementType(typeof(RoadPolyline))
		}

		var element : MapElement

		while ((element = reader.read()) !== null) {
			if (element instanceof RoadPolyline) {
				if (network === null) {
					network = new StandardRoadNetwork(worldRect)
				}
				var sgmt : RoadPolyline = element
				try {
					network.addRoadSegment(sgmt)
				} catch (e : RoadNetworkException) {
					throw new RuntimeException(e)
				}
			} else {
				if (layer === null) {
					layer = new TreeMapElementLayer
				try {
					layer.addMapElement(element)
				} catch (e : RoadNetworkException) {
					throw new RuntimeException(e)
				}
				}
			}	
		}
		
		if (network !== null) {
			var networkLayer = new RoadNetworkLayer(network)
			return networkLayer
		}

		return layer
	}
}