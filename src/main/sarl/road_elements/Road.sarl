package road_elements

import java.util.ArrayList
import java.util.UUID
import org.arakhne.afc.gis.road.RoadPolyline
import org.arakhne.afc.math.geometry.d2.d.Point2d

/** 
 * 
 */

/** 
 * @author robin
 * 
 */
class Road extends RoadPolyline {
	
	
	var objects : ArrayList<RoadObject>
	var beginX : int
	var beginY : int
	var endX : int
	var endY : int
	var distanceKilometers : double
	var speedLimit : int
	
	new(beginX:int, beginY:int, endX:int, endY:int, speedLimit:int=50){
		super()
		this.beginX = beginX
		this.beginY = beginY
		this.endX = endX
		this.endY = endY
		this.addPoint(beginX, beginY)
		this.addPoint(endX, endY)
		this.objects = new ArrayList<RoadObject>()
		this.speedLimit=speedLimit
		this.distanceKilometers = Math.sqrt(Math.pow((endX - beginX), 2) + Math.pow((endY - beginY), 2))
	}	
	
	new(beg : Point2d, end : Point2d, speed : int=50){
		this(beg.x as int,beg.y as int,end.x as int,end.y as int,speed)
	}

	def getObjects : ArrayList<RoadObject> {
		return this.objects
	}
	
	def getBeginX:int{
		return this.beginX
	}

	def getEndX : int {
		return this.endX
	}

	def getBeginY : int {
		return this.beginY
	}

	def getEndY : int {
		return this.endY
	}
	
	public def getBegin : Point2d{
		return new Point2d(this.beginX,this.beginY)
	}

	def getEnd : Point2d {
		return new Point2d(this.endX, this.endY)
	}
	
	def addObject(obj : RoadObject){
		this.objects.add(obj);
	}

	def removeObject(obj : RoadObject) {
		this.objects.remove(obj);
	}
	
	def removeObject(id : UUID) : RoadObject {
		var objToRemove : RoadObject = null;
		for(obj as RoadObject : this.objects){
			if (obj.getUUID() === id) {
				objToRemove = obj
			}
		}	
		
		if(objToRemove === null) throw new IllegalArgumentException("The UUID " + id + " doesn't exist")
		
		this.objects.remove(objToRemove)
		return objToRemove
	}	

	def listOfCars() : ArrayList<Car> {
		var cars = new ArrayList<Car>()
		for (obj as RoadObject : this.objects) {
			if (obj instanceof Car) {
				cars.add(obj)
			}
		}
		return cars
	}
	
	def getDistanceKilometers() : double {
		return this.distanceKilometers
	}

	def getDistanceMeters() : double {
		return this.distanceKilometers*1000
	}

	def getSpeedLimitKMH() : int {
		return this.speedLimit
	}

	def getSpeedLimitMS() : double {
		return this.speedLimit*3.6
	}

	def getObjectsByUUID(id : UUID) : RoadObject {
		for (current as RoadObject : this.objects) {
			if (current.getUUID() === id) {
				return current
			}
		}
		throw new IllegalArgumentException("This UUID doesn't exist")
	}
	
	def getSameDirectionCars(car : Car) : ArrayList<Car> {
		// return this.getSameDirectionCars(car.road.beginPoint.point, car.road.endPoint.point)
		var res = new ArrayList<Car>
		for (c : this.listOfCars) {
			if(c!==car){
				if (car.road.beginPoint.point.equals(c.road.beginPoint.point) &&
					car.road.endPoint.equals(c.road.endPoint.point)) {
					res.add(c)
				}
			}
		}
		return res
	}
	
	def getFrontCars(car : Car) : ArrayList<Car>{
		var cars = this.getSameDirectionCars(car)
		var res = new ArrayList<Car>
		for(c:cars){
			if(c.position.x - car.position.x>0){
				res.add(c)
			}
		}
		return res
	}
	
	def getFrontCarOf(car:Car) : Car{
		var lCars = this.getFrontCars(car)
		println("SIZE "+ lCars.size)
		if (lCars.size !== 0) {
			var frontCar : Car = lCars.get(0)
			var frontCarDistance = frontCar.position.x - car.position.x
			for (c : lCars) {
				
				if(car.position.x < c.position.x && c.position.x - car.position.x < frontCarDistance){
					frontCar = c
					frontCarDistance = c.position.x - car.position.x
				}
			}
			return frontCar
		}
		return null
		
	}

	def getFrontCarDistanceOf(car : Car) : double {
		return if(this.getFrontCars(car).size>=1) this.getFrontCarOf(car).position.x - car.position.x else 100000
	}
	

	
}
