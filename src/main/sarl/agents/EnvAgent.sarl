package agents

import events.ArrivedAtDestination
import events.ArrivedAtEndRoad
import events.Influence
import events.MoveForward
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.TreeMap
import java.util.UUID
import org.arakhne.afc.gis.road.primitive.RoadNetwork
import road_elements.Car
import road_elements.Road
import road_elements.TrafficLayers

agent EnvAgent {
	uses Logging
	uses DefaultContextInteractions
	uses Lifecycle

	var time : int = 0
	var network : RoadNetwork
	var trafficLayers : TrafficLayers
	val agentId_Cars = new TreeMap<UUID, Car>()

	on Initialize {
		synchronized (this) {
			this.trafficLayers = occurrence.parameters.get(0) as TrafficLayers
			this.network = this.trafficLayers.roadNetworkLayer.roadNetwork
		}

		spawnCarAndAgent
		spawnCarAndAgent
		spawnCarAndAgent
		spawnCarAndAgent
		
		// print(tl.mapElementLayer)
		/* 
		 * var voiture = new Car(0, this.network.roadSegments.get(0) as Road, tl)
		 * var voiture3 = new Car(1000, this.network.roadSegments.get(0) as Road, tl)
		 * var voiture2 = new Car(1, this.network.roadSegments.get(2) as Road, tl)
		 */
		// print(tl.mapElementLayer)
		//spawnCarAndAgent
		//emit(new Perception)[elt|elt.UUID==id]
	}

	on Influence {
		var agentId = occurrence.agentId
		var car = this.getCarByAgentId(agentId)
		
		
		if(car.coordinates.equals(occurrence.arrivalPoint)){
			emit(new ArrivedAtDestination)[elt|elt.UUID == agentId]
			return;
		}
		
		if (car.coordinates.equals(occurrence.endPoint)) {
			emit(new ArrivedAtEndRoad)[elt|elt.UUID == agentId]
			return;
		}
		
		emit(new MoveForward)[elt|elt.UUID == agentId]
	}


	synchronized def spawnCarAndAgent(time:int=0) : UUID {
		while(this.time<0){}
		
		var nbRoads = this.network.roadSegments.size
		var indexRoadRandom = (Math.random() * nbRoads) as int
		var selectedRoad = this.network.roadSegments.get(indexRoadRandom) as Road
		info(selectedRoad)
		//A FAIRE : vérifier si rien en dessous, sinon attendre que la place se libère ou chercher une autre place
		var car = new Car(0, selectedRoad, this.trafficLayers)
		var id = Driver.spawn(car,this.network)
		agentId_Cars.put(id,car)
		return id
	}
	
	def getCarByAgentId(agentId : UUID) : Car{
		return this.agentId_Cars.get(agentId)
	}
}
