/** 
 * 
 */
package agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import events.Influence
import events.Perception
import io.sarl.core.DefaultContextInteractions
import events.ArrivedAtDestination
import road_elements.Road
import java.util.ArrayList
import road_elements.TrafficLayers
import road_elements.Car

/** 
 * @author robin
 * 
 */
agent EnvAgent{
	uses Logging
	uses DefaultContextInteractions
	
	var time : int = 0

	on Initialize {
		var tl = occurrence.parameters.get(0) as TrafficLayers
		
		// this.roads = TrafficLayers::roadListFactory
		
		print(tl.mapElementLayer)
		
		var voiture = new Car(0, tl.getRoadNetworkLayer().getRoadNetwork().roadSegments.get(0) as Road, tl)
		var voiture3 = new Car(1000, tl.getRoadNetworkLayer().getRoadNetwork().roadSegments.get(0) as Road, tl)
		var voiture2 = new Car(1, tl.getRoadNetworkLayer().getRoadNetwork().roadSegments.get(2) as Road, tl)

		print(tl.mapElementLayer)
	}

	on Influence{
		var car=occurrence.influencedCar
		var ^agent=occurrence.^agent as Driver
		//info("influence"+ car.toString)
		var xAgent = ^agent.arrivalPoint.x
		var yAgent = ^agent.arrivalPoint.y
		if(car.x==xAgent && car.y==yAgent)
			emit(new ArrivedAtDestination())
	}
}
