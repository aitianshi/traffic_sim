/** 
 * 
 */
package agents

import org.arakhne.afc.gis.road.primitive.RoadNetwork
import org.arakhne.afc.math.geometry.d2.d.Point2d
import road_elements.Car
import road_elements.GPS
import road_elements.Road
import events.Perception
import events.Influence
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import events.ArrivedAtEndRoad
import io.sarl.core.Initialize

/** 
 * @author robin
 * 
 */
agent Driver {
	uses Logging
	uses DefaultContextInteractions
	
	protected var currentPoint : Point2d
	protected var arrivalPoint : Point2d
	protected var car : Car
	protected var speed:int

	synchronized def initProperties(pos1D : int, firstRoad : Road, startPoint : Point2d, arrivalPoint : Point2d) : void {
		this.currentPoint = startPoint
		this.arrivalPoint = arrivalPoint
		this.car = new Car(pos1D, firstRoad,null)
		this.speed = 0
	}

	on ArrivedAtEndRoad {
		var nextRoadToTake : Road 
		synchronized (this) {
			nextRoadToTake = GPS.nextRoad(this.currentPoint, this.arrivalPoint, this.car.getRoad().getRoadNetwork())
			this.car.road = nextRoadToTake
			this.car.pos1D=0
		}
	}

	on Perception {
		info("perception")
		emit(new Influence(this.car,this))

	}
	
	def getCurrentPoint:Point2d{
		return this.currentPoint
	}

	def getArrivalPoint : Point2d {
		return this.arrivalPoint
	}

	on Initialize {
		// emit(new AgentDeparture)
	}	
}
