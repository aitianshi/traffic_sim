/** 
 * 
 */
package agents

import org.arakhne.afc.gis.road.primitive.RoadNetwork
import org.arakhne.afc.math.geometry.d2.d.Point2d
import road_elements.Car
import road_elements.GPS
import road_elements.Road
import events.Perception
import events.Influence
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import events.ArrivedAtEndRoad
import io.sarl.core.Initialize
import java.util.ArrayList
import events.ArrivedAtDestination
import io.sarl.core.Lifecycle
import events.MoveForward
import org.arakhne.afc.gis.road.primitive.RoadConnection
import capacities.Drive
import capacities.DrivingNormal
import io.sarl.core.Destroy
import java.util.Random
import capacities.DrivingDangerous

/** 
 * @author robin
 * 
 */
agent Driver {
	uses Logging
	uses DefaultContextInteractions
	uses Lifecycle
	uses Drive

	protected var currentPoint : Point2d
	protected var arrivalPoint : Point2d
	protected var car : Car
	protected var gps : GPS
	var random = new Random

	protected var begSegment : Point2d
	protected var endSegment : Point2d
	var env : EnvAgent

	on Initialize {
		synchronized (this) {
			switch(this.random.nextInt(2)){
				case 0:
					setSkill(new DrivingNormal)
				default:
					setSkill(new DrivingDangerous)
			}
			
			this.env = occurrence.parameters.get(1) as EnvAgent

			this.car = occurrence.parameters.get(0) as Car

			// this.car.setCoordinates(this.begSegment, this.endSegment)
			this.currentPoint = this.car.coordinates
			this.arrivalPoint = new Point2d(50, 50)
			// this.gps = new GPS(this.currentPoint, this.arrivalPoint, this.env.network)
			// this.car.road = this.gps.nextRoad
			this.begSegment = this.car.road.beginPoint.point
			this.endSegment = this.car.road.endPoint.point
			this.car.setCoordinates(this.begSegment, this.endSegment)

			/* if (!this.gps.hasNextRoad) {
			 * this.killThis
			 * return
			 * }
			 */
			emit(new Influence(this.ID, this.arrivalPoint, this.endSegment))

		}

	}

	on Destroy {
		info("The agent was stopped.")
	}

	/* synchronized def initProperties(car : Car, arrivalPoint : Point2d, network : RoadNetwork) : void {
	 * 
	 * this.car.road = this.gps.nextRoad
	 * this.begSegment=this.gps.nextPoint
	 * this.endSegment = this.gps.nextPoint
	 * this.car.setCoordinates(this.begSegment, this.endSegment)
	 * this.currentPoint = this.car.coordinates
	 * 
	 * }
	 */
	def ArrivedAtEndRoad {
		synchronized (this) {

				/* var nextRoadToTake = this.gps.nextRoad
				 * 
				 * this.begSegment = this.endSegment
				 * this.endSegment = this.gps.nextPoint
				 * 
				 * if (this.endSegment === null)
				 * this.killThis
				 * this.car.setCoordinates(this.begSegment, this.endSegment)

				 * this.car.road.removeObject(this.car)
				 * this.car.road = nextRoadToTake
				 * this.car.road.addObject(this.car)

				 * this.car.pos1D = 0
				 * emit(new Influence(this.ID, this.arrivalPoint, this.endSegment))
				 */
			var b = this.car.road.beginPoint
			var e = this.car.road.endPoint

			var selectedRoad : Road
			if (b.isNearPoint(this.car.coordinates)) {
				do {
					var index = (this.random.nextDouble * b.connectedSegmentCount) as int
					selectedRoad = b.connectedSegments.get(index) as Road
				} while (selectedRoad === this.car.road)
			} else {
				do {
					var index = (this.random.nextDouble * e.connectedSegmentCount) as int
					selectedRoad = e.connectedSegments.get(index) as Road
				} while (selectedRoad === this.car.road)
			}

			this.car.road.removeObject(this.car)
			this.car.road = selectedRoad
			this.car.road.addObject(this.car)

			if (this.car.road.beginPoint.isNearPoint(this.car.coordinates)) {
				this.begSegment = this.car.road.beginPoint.point
				this.endSegment = this.car.road.endPoint.point
			} else {
				this.begSegment = this.car.road.endPoint.point
				this.endSegment = this.car.road.beginPoint.point
			}

			this.car.setCoordinates(this.begSegment, this.endSegment)
			this.car.position.x = 0
			// emit(new Influence(this.ID, this.arrivalPoint, this.begSegment))
		}

	}

	def ArrivedAtDestination {
		synchronized (this) {
			this.killThis
		}
	}

	synchronized def killThis : void {

		this.env.removeAgentAndCar(this.ID)
		this.car.road.removeObject(this.car)
		this.car.removeFromLayer
		killMe

	}

	on MoveForward {
		synchronized (this) {
			if (car.coordinates.equals(this.car.influence.arrivalPoint)) {
				this.ArrivedAtDestination 	// old event ArrivedAtDestination
			}

			if (car.coordinates.equals(this.car.influence.nextPoint)) {
				this.ArrivedAtEndRoad 	// old events ArrivedAtEndRoad
			}
			var distFrontCar=this.car.road.getFrontCarDistanceOf(this.car)
			//if (distFrontCar === 0 || distFrontCar<10) {
			
				this.car.position.x = this.car.position.x + speed
				this.car.setCoordinates(this.begSegment, this.endSegment)
				this.currentPoint = this.car.coordinates
			
				emit(new Influence(this.ID, this.arrivalPoint, this.endSegment))
			//}
			
			
		}

	}

	synchronized def getCurrentPoint : Point2d {
		return this.currentPoint
	}

	synchronized def getArrivalPoint : Point2d {
		return this.arrivalPoint
	}
}